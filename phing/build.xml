<?xml version="1.0" encoding="UTF-8"?>
<project name="GreenCape Build" default="build" basedir="../../">

    <import file="${project.basedir}/build/phing/setup.xml"/>
    <import file="${build}/phing/docker.xml"/>
    <import file="${build}/phing/document.xml"/>
    <import file="${build}/phing/help.xml"/>
    <import file="${build}/phing/metrics.xml"/>
    <import file="${build}/phing/patch.xml"/>
    <import file="${build}/phing/tests.xml"/>

    <property name="package.type" value="com_" description="default"/>
    <property name="package.name" value="untitled" description="default"/>
    <property name="manifest.file" value="installation/manifest.xml" description="default"/>
    <if>
        <available file="${source}/${manifest.file}" property="manifest.exists"/>
        <then>
            <xmlproperty file="${source}/${manifest.file}" prefix="package" collapseAttributes="false" keepRoot="false"/>
        </then>
        <else>
            <echo message="Manifest file '${manifest.file}' not found." level="warning"/>
        </else>
    </if>
    <property name="package.version" value="0.0.0" description="default"/>

    <property name="qat.coverage" value="${build}/bin/qat-coverage.php"/>
    <property name="qat-selenium.binary" value="${build}/bin/qat-selenium.php"/>
    <property name="selenium.binary" value="${project.basedir}/vendor/se/selenium-server-standalone/composer/bin/selenium-server-standalone.jar"/>

    <property name="dist.basedir" value="${project.basedir}/dist/${package.type}${package.name}-${package.version}"/>

    <property name="php.host" value="php"/>
    <property name="php.port" value="9000"/>

    <fileset dir="${source}" id="source-files">
        <include name="**/*"/>
    </fileset>
    <fileset dir="${source}" id="php-files">
        <include name="**/*.php"/>
    </fileset>
    <fileset dir="${source}" id="xml-files">
        <include name="**/*.xml"/>
    </fileset>
    <fileset dir="${integration-tests}" id="integration-test-files">
        <include name="**/*"/>
    </fileset>
    <fileset dir="${dist.basedir}" id="dist-files">
        <include name="**/*"/>
    </fileset>

    <target name="build" depends="prepare, test, quality, document" description="Performs all tests and generates documentation and the quality report."/>

    <target name="clean" description="Cleanup artifact directories" hidden="true">
        <delete dir="${build}/api" quiet="true"/>
        <delete dir="${build}/code-browser" quiet="true"/>
        <delete dir="${build}/coverage" quiet="true"/>
        <delete dir="${build}/logs" quiet="true"/>
        <delete dir="${build}/charts" quiet="true"/>
    </target>

    <target name="prepare" depends="clean" description="Create artifact directories" hidden="true">
        <mkdir dir="${build}/api"/>
        <mkdir dir="${build}/code-browser"/>
        <mkdir dir="${build}/coverage"/>
        <mkdir dir="${build}/logs"/>
        <mkdir dir="${build}/charts"/>
    </target>

    <target name="phpab" description="Generate autoload script" hidden="true">
        <foreach list="administrator/components, components" target="create-autoloader" param="target"/>
        <exec command="phpab --tolerant --basedir . --output autoload.php mocks" dir="${tests}" passthru="true"/>
    </target>

    <target name="create-autoloader" hidden="true">
        <if>
            <available file="${source}/${target}" property="exists"/>
            <then>
                <echo message="Creating autoloader for ${source}/${target}/${package.type}${package.name}"/>
                <exec executable="phpab" dir="${source}/${target}/${package.type}${package.name}" passthru="true">
                    <arg line="--tolerant"/>
                    <arg line="--basedir ."/>
                    <arg line="--output autoload.php"/>
                    <arg line="--template autoload.php.in"/>
                    <arg path="../../"/>
                </exec>
            </then>
        </if>
    </target>

    <!-- Managing test installations -->

    <target name="inst-copy" description="Copy the AUT and the tests to a test installation" hidden="true">
        <copy todir="${test.basedir}/${target}/source" overwrite="true">
            <fileset dir="${patchset.location}" expandsymboliclinks="true">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${test.basedir}/${target}/tests" overwrite="true">
            <fileset dir="${tests}" expandsymboliclinks="true">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <target name="inst-install" description="Install the AUT on a test installation" hidden="true">
        <echo message="Installing ${phing.project.name} version ${package.version} on ${target}"/>
        <exec executable="${build}/bin/joomla.php" passthru="true">
            <arg line="install --ansi -vvv --basepath='${test.basedir}/${target}/source' '${dist.basedir}.zip'"/>
        </exec>
    </target>

    <!-- Selenium Server -->

    <target name="selenium-start">
        <exec command="'${qat-selenium.binary}' start --jar ${selenium.binary}" passthru="true"/>
    </target>

    <target name="selenium-status">
        <exec command="'${qat-selenium.binary}' status" passthru="true"/>
    </target>

    <target name="selenium-stop">
        <exec command="'${qat-selenium.binary}' stop" passthru="true"/>
    </target>

    <target name="selenium-restart" depends="">
        <exec command="'${qat-selenium.binary}' restart --jar  ${selenium.binary}" passthru="true"/>
    </target>

    <!-- Installation on target systems -->

    <target name="sys-install-all" depends="dist-prepare">
        <foreach list="${test.environments}" param="target" target="inst-install"/>
    </target>

    <target name="sys-reset-all" description="Reset the installations to the 'testbase' tag and restore the database">
        <echo>
            Going to reset the test installations ${test.environments}.
            This will take a couple of minutes due to the restoration of the databases.
        </echo>
        <foreach list="${test.environments}" param="target" target="inst-restore"/>
    </target>

    <!-- Distribution package -->

    <target name="dist" depends="build, dist-prepare" description="Generate the distribution">
        <zip destfile="dist/${package.type}${package.name}-${package.version}.zip">
            <fileset refid="dist-files"/>
        </zip>
        <tar destfile="dist/${package.type}${package.name}-${package.version}.tar.gz" compression="gzip">
            <fileset refid="dist-files"/>
        </tar>
        <tar destfile="dist/${package.type}${package.name}-${package.version}.tar.bz2" compression="bzip2">
            <fileset refid="dist-files"/>
        </tar>
    </target>

    <target name="dist-clean" description="Cleanup distribution directory">
        <delete dir="${project.basedir}/dist" quiet="true"/>
    </target>

    <target name="dist-prepare" depends="phpab, dist-clean" description="Create distribution directory">
        <!--
        Installation files
        -->
        <mkdir dir="${dist.basedir}"/>
        <copy todir="${dist.basedir}">
            <fileset dir="${source}/installation">
                <include name="*.php"/>
                <include name="*.xml"/>
            </fileset>
            <fileset dir="${project.basedir}">
                <include name="*.md"/>
            </fileset>
        </copy>
        <!--
        Admin component
        -->
        <mkdir dir="${dist.basedir}/${package.administration.files(folder)}"/>
        <copy todir="${dist.basedir}/${package.administration.files(folder)}">
            <filelist dir="${source}/administrator/components/${package.type}${package.name}" files="${package.administration.files.folder}"/>
            <filelist dir="${source}/administrator/components/${package.type}${package.name}" files="${package.administration.files.filename}"/>
        </copy>
        <!--
        Admin language
        -->
        <mkdir dir="${dist.basedir}/${package.administration.languages(folder)}"/>
        <copy todir="${dist.basedir}/${package.administration.languages(folder)}">
            <fileset dir="${source}/administrator/language">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!-- @todo Add frontend files -->
        <zip destfile="dist/${package.type}${package.name}-${package.version}.zip">
            <fileset refid="dist-files"/>
        </zip>
    </target>

    <target name="test-target">
        <docker-list dir="${server-dockyard}" returnProperty="containers"/>
        <echo message="Matching containers: ${containers}"/>
        <docker-def dir="${server-dockyard}" returnProperty="containers" override="true"/>
        <echo message="Defined servers: ${containers}"/>
    </target>
</project>
