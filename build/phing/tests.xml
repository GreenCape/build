<?xml version="1.0" encoding="UTF-8"?>
<!--
Test related targets for GreenCape build environment

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,USA.

The "GNU General Public License" (GPL) is available at
http://www.gnu.org/licenses/old-licenses/gpl-2.0.html

@package    BuildEnvironment
@author     Niels Braczek <nbraczek@bsds.de>
@copyright  Copyright (C) 2013-15 BSDS Braczek Software- und DatenSysteme. All rights reserved.
-->
<project name="Test Related Targets" default="patch-create">

    <target name="test" depends="test-unit, test-integration, test-system, test-coverage-report" description="Runs all tests locally and in the test containers."/>

    <target name="test-unit" depends="phpab" description="Runs local unit tests">

        <mkdir dir="${build}/logs/coverage"/>

        <exec command="phpunit" dir="${unit-tests}" passthru="true"/>
        <reflexive>
            <fileset dir="${build}/logs/coverage">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="'(.*?)Test::test" replace="'Unit: \1Test::test"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <target name="test-integration" description="Runs integration tests on all test installations.">
        <!-- @todo Make this callable for arbitrary test environments-->

        <mkdir dir="${build}/logs/coverage"/>

        <!-- Handle each test environment -->
        <foreach param="environment-definition" target="test-integration-single">
            <fileset dir="${test-environments}">
                <include name="*.xml"/>
                <exclude name="database.xml"/>
                <exclude name="default.xml"/>
            </fileset>
        </foreach>

    </target>

    <target name="test-integration-single" description="Run integrations tests on a single test installation" hidden="true">
        <php expression="basename('${environment-definition}', '.xml')" returnProperty="target" level="debug"/>

        <!-- Get the environment settings -->
        <xmlproperty file="${test-environments}/${environment-definition}" keepRoot="true" collapseAttributes="true"/>
        <property name="environment.name" value="${target}" description="default"/>

        <!-- Supply with default values -->
        <xmlproperty file="${test-environments}/default.xml" keepRoot="true" collapseAttributes="true"/>
        <property name="environment.server.type" value="nginx" description="default"/>
        <property name="environment.server.tld" value="dev" description="default"/>
        <property name="domain" value="${environment.name}.${environment.server.tld}"/>
        <property name="cms-root" value="${server-dockyard}/${environment.server.type}/html/${domain}"/>
        <if>
            <equals arg1="${environment.server.type}" arg2="nginx"/>
            <then>
                <property name="container" value="servers_php_1"/>
            </then>
            <else>
                <property name="container" value="servers_${environment.server.type}_1"/>
            </else>
        </if>

        <uptodate property="test-integration-single.status" targetfile="${build}/logs/coverage/integration-${target}.cov" value="uptodate">
            <fileset refid="source-files"/>
            <fileset refid="integration-test-files"/>
        </uptodate>
        <if>
            <equals arg1="${test-integration-single.status}" arg2="uptodate"/>
            <then>
                <echo message="Integration test for ${target} is up to date - skipping." level="info"/>
            </then>
            <else>
                <trycatch property="error">
                    <try>
                        <echo message="Integration test on ${target}" level="info"/>
                        <delete dir="${cms-root}/build/logs" quiet="true"/>
                        <mkdir dir="${cms-root}/build/logs"/>

                        <foreach list="site, administrator" param="application" target="test-integration-app"/>

                        <combine-coverage
                            pattern="/var/www/html/${domain}/" replace="${source}/"
                            php="${cms-root}/build/logs/integration-${target}.cov">
                            <fileset dir="${cms-root}/build/logs">
                                <include name="**/*.cov"/>
                            </fileset>
                        </combine-coverage>
                        <copy file="${cms-root}/build/logs/integration-${target}.cov" todir="${build}/logs/coverage">
                            <filterchain>
                                <replaceregexp>
                                    <regexp pattern="'(.*?)Test::test" replace="'${target}: \1Test::test"/>
                                </replaceregexp>
                            </filterchain>
                        </copy>
                    </try>
                    <catch>
                        <echo message="Failed. ${error}" level="error"/>
                    </catch>
                    <finally>
                    </finally>
                </trycatch>
            </else>
        </if>
    </target>

    <target name="test-integration-app" hidden="true">
        <filterchain id="integration-test.configuration">
            <replacetokens>
                <token key="APPLICATION" value="${application}"/>
                <token key="CMS_ROOT" value="/var/www/html/${domain}"/>
                <token key="TARGET" value="${target}"/>
            </replacetokens>
        </filterchain>

        <echo message="${application}"/>

        <!-- Find bootstrap file -->
        <version-match dir="${build-templates}/tests/integration" pattern="bootstrap-(.*).php" returnProperty="bootstrap" version="${environment.joomla.version}"/>
        <fail unless="bootstrap" message="No bootstrap file found for Joomla! ${environment.joomla.version}"/>

        <!-- Configure bootstrap file -->
        <copy file="${bootstrap}" tofile="${cms-root}/tests/integration/${application}/bootstrap.php">
            <filterchain refid="integration-test.configuration"/>
        </copy>

        <!-- Configure phpunit -->
        <copy file="${build-templates}/tests/integration/phpunit.xml" tofile="${cms-root}/tests/integration/${application}/phpunit.xml">
            <filterchain refid="integration-test.configuration"/>
        </copy>

        <property name="cmd" value='sudo docker exec ${container} /bin/bash -cv "cd /var/www/html/${domain}/tests/integration/${application}; /vendor/bin/phpunit"'/>
        <exec command="${cmd}" passthru="true" logoutput="true"/>
    </target>

    <target name="test-system" depends="dist-prepare" description="Runs system tests on all test installations.">
        <delete dir="${build}/screenshots" quiet="true"/>
        <mkdir dir="${build}/screenshots"/>

        <!-- Handle each test environment -->
        <foreach param="environment-definition" target="test-system-single">
            <fileset dir="${test-environments}">
                <include name="*.xml"/>
                <exclude name="database.xml"/>
                <exclude name="default.xml"/>
            </fileset>
        </foreach>
    </target>

    <target name="test-system-single" description="Run system tests on a single test installation" hidden="true">
        <php expression="basename('${environment-definition}', '.xml')" returnProperty="target" level="debug"/>

        <!-- Get the environment settings -->
        <xmlproperty file="${test-environments}/${environment-definition}" keepRoot="true" collapseAttributes="true"/>
        <property name="environment.name" value="${target}" description="default"/>

        <!-- Supply with default values -->
        <xmlproperty file="${test-environments}/default.xml" keepRoot="true" collapseAttributes="true"/>
        <property name="environment.server.type" value="nginx" description="default"/>
        <property name="environment.server.tld" value="dev" description="default"/>
        <property name="domain" value="${environment.name}.${environment.server.tld}"/>
        <property name="cms-root" value="${server-dockyard}/${environment.server.type}/html/${domain}"/>
        <property name="environment.browser.type" value="firefox" description="default"/>

        <filterchain id="system-test.configuration">
            <replacetokens>
                <token key="APPLICATION" value="${application}"/>
                <token key="BROWSER" value="${environment.browser.type}"/>
                <token key="CMS_ROOT" value="/var/www/html/${domain}"/>
                <token key="DOMAIN" value="${domain}"/>
                <token key="TARGET" value="${target}"/>
            </replacetokens>
        </filterchain>

        <trycatch property="error">
            <try>
                <echo message="System test for ${target} on ${domain}" level="info"/>

                <!-- Find bootstrap file -->
                <version-match dir="${build-templates}/tests/system" pattern="bootstrap-(.*).php" returnProperty="bootstrap" version="${environment.joomla.version}"/>
                <fail unless="bootstrap" message="No bootstrap file found for Joomla! ${environment.joomla.version}"/>

                <!-- Configure bootstrap file -->
                <copy file="${bootstrap}" tofile="${cms-root}/tests/system/bootstrap.php">
                    <filterchain refid="system-test.configuration"/>
                </copy>

                <!-- Configure phpunit -->
                <copy file="${build-templates}/tests/system/phpunit.xml" tofile="${cms-root}/tests/system/phpunit.xml">
                    <filterchain refid="system-test.configuration"/>
                </copy>

                <property name="container" value="servers_${environment.server.type}_1"/>
                <property name="cmd" value='sudo docker exec ${container} /bin/bash -cv "cd /var/www/html/${domain}/tests/system; /vendor/bin/phpunit"'/>
                <exec command="${cmd}" passthru="true" logoutput="true"/>

                <combine-coverage php="${cms-root}/build/logs/integration-${target}.cov">
                    <fileset dir="${cms-root}/build/logs">
                        <include name="**/*.cov"/>
                    </fileset>
                </combine-coverage>
                <copy file="${cms-root}/build/logs/integration-${target}.cov" todir="${build}/logs/coverage">
                    <filterchain>
                        <replaceregexp>
                            <regexp pattern="/var/www/html/${domain}/" replace="${source}/"/>
                            <regexp pattern="'(.*?)Test::test" replace="'${target}: \1Test::test"/>
                        </replaceregexp>
                    </filterchain>
                </copy>
            </try>
            <catch>
                <echo message="Failed. ${error}" level="error"/>
            </catch>
            <finally>
            </finally>
        </trycatch>
    </target>

    <target name="test-coverage-report" description="Creates an consolidated HTML coverage report">
        <mkdir dir="${build}/logs/coverage/report"/>
        <reflexive>
            <fileset dir="${build}/logs/coverage">
                <include name="**/*.cov"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="PHP_CodeCoverage" replace="CoverageCollector"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <exec command='php ${build}/bin/Coverage.php' passthru="true" checkreturn="true"/>
        <reflexive>
            <fileset dir="${build}/coverage">
                <include name="**/*.html"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${source}" replace="${phing.project.name}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

</project>
